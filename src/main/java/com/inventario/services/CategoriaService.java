package com.inventario.services;

import java.util.List;

import com.inventario.dao.CategoriaDAO;
import com.inventario.models.Categoria;

public class CategoriaService {
    private final CategoriaDAO categoriaDAO;

    public CategoriaService() {
        this.categoriaDAO = new CategoriaDAO();
    }

    /**
     * üîπ Obtiene todas las categor√≠as disponibles.
     */
    public List<Categoria> obtenerCategorias() {
        return categoriaDAO.obtenerCategorias();
    }

    /**
     * üîπ Agrega una nueva categor√≠a despu√©s de validar los datos.
     */
    public void agregarCategoria(Categoria categoria) throws Exception {
        if (!validarCategoria(categoria)) {
            throw new Exception("Error en la validaci√≥n de la categor√≠a. Revisa los campos ingresados.");
        }

        if (categoriaDAO.existeCategoria(categoria.getNombre())) {
            throw new Exception("La categor√≠a '" + categoria.getNombre() + "' ya existe.");
        }

        if (!categoriaDAO.agregarCategoria(categoria)) {
            throw new Exception("No se pudo agregar la categor√≠a. Intenta nuevamente.");
        }
    }

    /**
     * üîπ Actualiza una categor√≠a existente.
     */
    public void actualizarCategoria(Categoria categoria) throws Exception {
        if (categoria.getIdCategoria() <= 0) {
            throw new Exception("ID de categor√≠a inv√°lido.");
        }

        if (!validarCategoria(categoria)) {
            throw new Exception("Error en la validaci√≥n de la categor√≠a. Revisa los campos ingresados.");
        }

        if (!categoriaDAO.actualizarCategoria(categoria)) {
            throw new Exception("No se pudo actualizar la categor√≠a. Intenta nuevamente.");
        }
    }

    /**
     * üîπ Elimina una categor√≠a por su ID despu√©s de verificar que no est√° asociada a productos.
     */
    public void eliminarCategoria(int idCategoria) throws Exception {
        if (idCategoria <= 0) {
            throw new Exception("ID de categor√≠a inv√°lido.");
        }

        if (!categoriaDAO.eliminarCategoria(idCategoria)) {
            throw new Exception("No se pudo eliminar la categor√≠a. Puede estar asociada a productos.");
        }
    }

    /**
     * üîπ Obtiene una categor√≠a espec√≠fica por su ID.
     */
    public Categoria obtenerCategoriaPorId(int idCategoria) {
        if (idCategoria <= 0) {
            System.out.println("‚ùå Error: ID de categor√≠a inv√°lido.");
            return null;
        }
        return categoriaDAO.obtenerCategoriaPorId(idCategoria);
    }

    /**
     * üîπ Verifica si una categor√≠a ya existe por su nombre.
     */
    public boolean existeCategoria(String nombre) {
        return categoriaDAO.existeCategoria(nombre);
    }

    /**
     * üîπ Valida que los datos de la categor√≠a sean correctos.
     */
    private boolean validarCategoria(Categoria categoria) {
        if (categoria.getNombre() == null || categoria.getNombre().trim().isEmpty()) {
            System.out.println("‚ùå Error: El nombre de la categor√≠a no puede estar vac√≠o.");
            return false;
        }

        if (categoria.getDescripcion() != null && categoria.getDescripcion().length() > 200) {
            System.out.println("‚ùå Error: La descripci√≥n de la categor√≠a no puede superar los 200 caracteres.");
            return false;
        }

        return true;
    }
}
